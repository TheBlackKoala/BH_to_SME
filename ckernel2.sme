type vdata: i32;
const len: uint = 32;
const halfLen: uint = len/2;
const reduceLen : uint = 5;//Has to be log(len)
type adata: vdata [ len ];
type tdata: { val : adata; valid : bool = false; len : uint;};

clocked proc instr0()
	//Output
	bus a0l1: tdata;
	bus a1l0: tdata;
	var minLen : uint;
	var acc : vdata [ halfLen ];
	var lenReduc : uint;
	var minLen2 : uint;
	var i : uint;
	var j : uint;
{
	if (a1l0.valid){
		minLen = a1l0.len;
		a0l1.valid = true;
		a0l1.len = 1;
		lenReduc = len;
		for j = 0 to reduceLen - 1 {
			lenReduc = lenReduc/2;
			minLen2 = minLen/2;
			for i = 0 to lenReduc - 1 {
				if (i<minLen2){
					if(j==0){
						if(i==0){
							acc[0] = acc[0] + a1l0.val[i*2] + a1l0.val[i*2+1];
						}
						else{
							acc[i] = a1l0.val[i*2] + a1l0.val[i*2+1];
						}
					}
					else{
						acc[i] = acc[i*2] + acc[i*2+1];
					}
				}
				elif(i==minLen2 && minLen-minLen2!=minLen2){
					if(j==0){
						acc[i] = a1l0.val[i*2];
					}
					else{
						acc[i] = acc[i*2];
					}
				}
			}
			if(minLen-minLen2!=minLen2){
				minLen = minLen2+1;
			}
			else{
				minLen= minLen2;
			}
		}
		a0l1.val[0] = acc[0];
	}
	else{
		a0l1.valid = false;
	}
}

clocked proc repeater()
	//Output
	bus output: tdata;
	bus input: tdata;
{
	if (input.valid){
		output.valid=true;
		for i = 0 to len -1 {
			if ( i < input.len){
				output.val[i] = input.val[i];
			}
		}
		output.len = input.len;
	}
	else{
		output.valid = false;
	}
}

network bohrium(in a1: tdata, out a0: tdata){
	instance 0_inst of instr0();

	instance repa1l1 of repeater();
	connect
		a1 -> repa1l1.input,

		a1 -> 0_inst.a1l0,
		0_inst.a0l1 -> a0;
}
