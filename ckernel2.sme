type vdata: i32;
const len: uint = 32;
const halfLen: uint = len/2;
const reduceLen : uint = 5;//Has to be log(len)
type adata: vdata [ len ];
type tdata: { val : adata; valid : bool = false; len : uint;};

clocked proc instr0()
	//Output
	bus a1l1: tdata;
	bus a2l0: tdata;
	var minLen : uint;
{
	if (a2l0.valid){
		minLen = a2l0.len;
		a1l1.valid = true;
		a1l1.len = minLen;
		for i = 0 to len - 1 {
			if (i<minLen){
				a1l1.val[i] = a2l0.val[i] + a2l0.val[i];
			}
		}
	}
	else{
		a1l1.valid = false;
	}
}

clocked proc instr1()
	//Output
	bus a3l2: tdata;
	bus a1l1: tdata;
	var minLen : uint;
{
	if (a1l1.valid){
		minLen = a1l1.len;
		a3l2.valid = true;
		a3l2.len = minLen;
		for i = 0 to len - 1 {
			if (i<minLen){
				a3l2.val[i] = a1l1.val[i] - 2;
			}
		}
	}
	else{
		a3l2.valid = false;
	}
}

clocked proc instr2()
	//Output
	bus a4l3: tdata;
	bus a1l2: tdata;
	bus a3l2: tdata;
	var minLen : uint;
{
	if (a1l2.valid && a3l2.valid){
		minLen = a1l2.len;
		if (minLen > a3l2.len){
			minLen = a3l2.len;
		}
		a4l3.valid = true;
		a4l3.len = minLen;
		for i = 0 to len - 1 {
			if (i<minLen){
				a4l3.val[i] = a1l2.val[i] + a3l2.val[i];
			}
		}
	}
	else{
		a4l3.valid = false;
	}
}

clocked proc instr3()
	//Output
	bus a0l4: tdata;
	bus a4l3: tdata;
	var minLen : uint;
	var acc : vdata [ len/2 ];
	var lenReduc : uint;
	var minLen2 : uint;
{
	if (a4l3.valid){
		minLen = a4l3.len;
		a0l4.valid = true;
		a0l4.len = 1;
		lenReduc = len;
		for j = 0 to reduceLen - 1 {
			lenReduc = lenReduc/2;
			minLen2 = minLen/2;
			for i = 0 to lenReduc - 1 {
				if (i<minLen2){
					if(j==0){
						if(i==0){
							acc[0] = acc[0] + a4l3.val[i*2] + a4l3.val[i*2+1];
						}
						else{
							acc[i] = a4l3.val[i*2] + a4l3.val[i*2+1];
						}
					}
					else{
						acc[i] = acc[i*2] + acc[i*2+1];
					}
				}
				elif(i==minLen2 && minLen-minLen2!=minLen2){
					if(j==0){
						acc[i] = a4l3.val[i*2];
					}
					else{
						acc[i] = acc[i*2];
					}
				}
			}
			if(minLen-minLen2!=minLen2){
				minLen = minLen2+1;
			}
			else{
				minLen= minLen2;
			}
		}
		a0l4.val[0] = acc[0];
	}
	else{
		a0l4.valid = false;
	}
}

clocked proc repeater()
	//Output
	bus output: tdata;
	bus input: tdata;
{
	if (input.valid){
		output.valid=true;
		for i = 0 to len -1 {
			if ( i < input.len){
				output.val[i] = input.val[i];
			}
		}
		output.len = input.len;
	}
	else{
		output.valid = false;
	}
}

network bohrium(in a2: tdata, out a3: tdata, out a0: tdata){
	instance 0_inst of instr0();
	instance 1_inst of instr1();
	instance 2_inst of instr2();
	instance 3_inst of instr3();

	instance repa1l2 of repeater();
	instance repa1l3 of repeater();
	instance repa1l4 of repeater();
	instance repa2l1 of repeater();
	instance repa2l2 of repeater();
	instance repa2l3 of repeater();
	instance repa2l4 of repeater();
	instance repa3l3 of repeater();
	instance repa3l4 of repeater();
	instance repa4l4 of repeater();
	connect
		repa1l2.output -> repa1l3.input,
		repa1l3.output -> repa1l4.input,
		a2 -> repa2l1.input,
		repa2l1.output -> repa2l2.input,
		repa2l2.output -> repa2l3.input,
		repa2l3.output -> repa2l4.input,
		repa3l3.output -> repa3l4.input,

		0_inst.a1l1 -> repa1l2.input,
		a2 -> 0_inst.a2l0,
		1_inst.a3l2 -> repa3l3.input,
		0_inst.a1l1 -> 1_inst.a1l1,
		2_inst.a4l3 -> repa4l4.input,
		repa1l2.output -> 2_inst.a1l2,
		1_inst.a3l2 -> 2_inst.a3l2,
		2_inst.a4l3 -> 3_inst.a4l3,
		repa3l4.output -> a3,
		3_inst.a0l4 -> a0;
}
